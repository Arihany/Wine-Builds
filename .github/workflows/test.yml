name: Build Proton-base Wine (ARM64EC, WoW64) â€” pinned & cached

on:
  workflow_dispatch:
    inputs:
      wine_tag:
        description: 'ValveSoftware/wine tag (e.g. proton-wine-10.0-2d)'
        required: true
        default: 'proton-wine-10.0-2d'

jobs:
  build:
    runs-on: ubuntu-24.04
    env:
      PREFIX: ${{ github.workspace }}/_inst
      STAGE:  ${{ github.workspace }}/_stage
      TOOLCHAIN_ROOT: ${{ github.workspace }}/.toolchains
      LLVM_TC_DIR: ${{ github.workspace }}/.toolchains/llvm-mingw-arm64ec
      CCACHE_DIR: ${{ github.workspace }}/.ccache
      CCACHE_MAXSIZE: 4G
      CCACHE_COMPRESS: "1"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare dirs
        run: mkdir -p "$TOOLCHAIN_ROOT" "$CCACHE_DIR"

      - name: Query FEX ARM64EC toolchain meta
        id: tcmeta
        shell: bash
        run: |
          set -e
          json=$(curl -fsSL https://api.github.com/repos/FEX-Emu/FEX/releases/latest)
          tag=$(jq -r '.tag_name' <<<"$json")
          url=$(jq -r '.assets[] | select(.name | test("arm64ec.*(ubuntu|linux).*x86_64.*\\.(tar\\.(xz|zst))$")) | .browser_download_url' <<<"$json" | head -n1)
          [[ -n "$tag" && -n "$url" ]] || { echo "FEX ARM64EC toolchain asset not found"; exit 1; }
          echo "tag=$tag" >> "$GITHUB_OUTPUT"
          echo "url=$url" >> "$GITHUB_OUTPUT"

      - name: Cache toolchain (extracted)
        id: cache_tc
        uses: actions/cache@v4
        with:
          path: ${{ env.LLVM_TC_DIR }}
          key: llvm-mingw-arm64ec-${{ runner.os }}-${{ steps.tcmeta.outputs.tag }}

      - name: Download & extract toolchain if cache missed
        if: steps.cache_tc.outputs.cache-hit != 'true'
        shell: bash
        run: |
          set -e
          mkdir -p "$LLVM_TC_DIR"
          cd "$TOOLCHAIN_ROOT"
          file=$(basename "${{ steps.tcmeta.outputs.url }}")
          curl -L --retry 5 -o "$file" "${{ steps.tcmeta.outputs.url }}"
          case "$file" in
            *.tar.xz) tar -C "$LLVM_TC_DIR" --strip-components=1 -xf "$file" ;;
            *.tar.zst) tar --zstd -C "$LLVM_TC_DIR" --strip-components=1 -xf "$file" ;;
            *) echo "Unknown archive: $file"; exit 1 ;;
          esac

      - name: Add toolchain to PATH
        run: echo "PATH=${{ env.LLVM_TC_DIR }}/bin:$PATH" >> $GITHUB_ENV

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ inputs.wine_tag }}-${{ steps.tcmeta.outputs.tag }}-v1
          restore-keys: |
            ccache-${{ runner.os }}-

      - name: Install build deps
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential clang lld git curl jq xz-utils rsync pkg-config \
            bison flex gettext autoconf automake libtool \
            libfreetype6-dev libfontconfig1-dev libglib2.0-dev libunwind-dev \
            libx11-dev libxext-dev libxi-dev libxrandr-dev libxrender-dev \
            libxcursor-dev libxfixes-dev libxinerama-dev libxcomposite-dev \
            libxdamage-dev libxkbcommon-dev libwayland-dev libdbus-1-dev \
            libasound2-dev libpulse-dev libudev-dev libvulkan-dev \
            ocl-icd-opencl-dev zlib1g-dev libjpeg-dev libpng-dev libtiff-dev \
            libgsm1-dev libldap2-dev libpcap0.8-dev ccache

      - name: Setup ccache masquerade for MinGW-LLVM
        run: |
          sudo mkdir -p /usr/local/bin
          for t in arm64ec-w64-mingw32 aarch64-w64-mingw32 i686-w64-mingw32; do
            for c in clang clang++; do
              sudo ln -sf "$(command -v ccache)" "/usr/local/bin/${t}-${c}"
            done
          done
          echo "CCACHE_DIR=${CCACHE_DIR}" >> $GITHUB_ENV
          echo "CCACHE_BASEDIR=${GITHUB_WORKSPACE}" >> $GITHUB_ENV
          echo "CCACHE_COMPRESS=${CCACHE_COMPRESS}" >> $GITHUB_ENV
          echo "CCACHE_MAXSIZE=${CCACHE_MAXSIZE}" >> $GITHUB_ENV
          ccache -p || true

      - name: Resolve wine tag -> commit
        id: pin
        shell: bash
        run: |
          set -e
          TAG="${{ inputs.wine_tag }}"
          git ls-remote --tags https://github.com/ValveSoftware/wine.git "refs/tags/${TAG}" > out.txt
          if [[ ! -s out.txt ]]; then
            echo "Tag not found: ${TAG}"
            exit 1
          fi
          SHA=$(awk '{print $1}' out.txt)
          echo "wine_sha=$SHA" >> $GITHUB_OUTPUT
          echo "Pinned wine: $SHA"

      - name: Checkout Valve wine at pinned tag
        run: |
          git clone https://github.com/ValveSoftware/wine.git src-wine
          git -C src-wine fetch --depth=1 origin ${{ steps.pin.outputs.wine_sha }}
          git -C src-wine checkout ${{ steps.pin.outputs.wine_sha }}
          git -C src-wine log -1 --oneline

      - name: Configure (ARM64EC + AArch64 + i386) with clang
        working-directory: src-wine
        run: |
          mkdir -p build && cd build
          ../configure \
            --enable-archs=arm64ec,aarch64,i386 \
            --with-mingw=clang \
            --disable-tests \
            --prefix="${PREFIX}"
          which arm64ec-w64-mingw32-clang
          which aarch64-w64-mingw32-clang
          which i686-w64-mingw32-clang

      - name: Build & Install (ccache on)
        working-directory: src-wine/build
        run: |
          ccache -z || true
          make -j"$(nproc)"
          ccache -s || true
          make install
          mkdir -p "${STAGE}"
          rsync -a "${PREFIX}/" "${STAGE}/"
          rm -rf "${STAGE}/share/man" "${STAGE}/share/applications" \
                 "${STAGE}/share/icons" "${STAGE}/share/pixmaps" \
                 "${STAGE}/share/mime" || true

      - name: Verify required lib/wine triplets
        run: |
          set -e
          for d in aarch64-unix aarch64-windows i386-windows; do
            test -d "${STAGE}/lib/wine/$d" || { echo "::error::$d missing under lib/wine"; exit 1; }
          done
          test -f "${STAGE}/share/wine/wine.inf" || { echo "::error::share/wine/wine.inf missing"; exit 1; }
          echo "[/bin]" && find "${STAGE}/bin" -maxdepth 1 -type f -printf "%f\n" | sort
          echo "[/lib/wine]" && find "${STAGE}/lib/wine" -maxdepth 1 -type d -printf "%f\n" | sort

      - name: Pack runtime (tar.xz, multi-thread)
        run: tar -C "${STAGE}" -I 'xz -T0 -9' -cf wine-${{ inputs.wine_tag }}-arm64ec-wow64.tar.xz .

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: wine-${{ inputs.wine_tag }}-arm64ec-wow64
          path: wine-${{ inputs.wine_tag }}-arm64ec-wow64.tar.xz
          if-no-files-found: error
